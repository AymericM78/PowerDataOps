<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.ObjectPool</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1">
            <summary>
            Default implementation of <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/>.
            </summary>
            <typeparam name="T">The type to pool objects for.</typeparam>
            <remarks>This implementation keeps a cache of retained objects. This means that if objects are returned when the pool has already reached "maximumRetained" objects they will be available to be Garbage Collected.</remarks>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1.#ctor(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{`0})">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1"/>.
            </summary>
            <param name="policy">The pooling policy to use.</param>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1.#ctor(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{`0},System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1"/>.
            </summary>
            <param name="policy">The pooling policy to use.</param>
            <param name="maximumRetained">The maximum number of objects to retain in the pool.</param>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1.Get">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.DefaultObjectPool`1.Return(`0)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.DefaultObjectPoolProvider">
            <summary>
            The default <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.ObjectPool.DefaultObjectPoolProvider.MaximumRetained">
            <summary>
            The maximum number of objects to retain in the pool.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.DefaultObjectPoolProvider.Create``1(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.DefaultPooledObjectPolicy`1">
            <summary>
            Default implementation for <see cref="T:Microsoft.Extensions.ObjectPool.PooledObjectPolicy`1"/>.
            </summary>
            <typeparam name="T">The type of object which is being pooled.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.DefaultPooledObjectPolicy`1.Create">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.DefaultPooledObjectPolicy`1.Return(`0)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.IPooledObjectPolicy`1">
            <summary>
            Represents a policy for managing pooled objects.
            </summary>
            <typeparam name="T">The type of object which is being pooled.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.IPooledObjectPolicy`1.Create">
            <summary>
            Create a <typeparamref name="T"/>.
            </summary>
            <returns>The <typeparamref name="T"/> which was created.</returns>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.IPooledObjectPolicy`1.Return(`0)">
            <summary>
            Runs some processing when an object was returned to the pool. Can be used to reset the state of an object and indicate if the object should be returned to the pool.
            </summary>
            <param name="obj">The object to return to the pool.</param>
            <returns><see langword="true" /> if the object should be returned to the pool. <see langword="false" /> if it's not possible/desirable for the pool to keep the object.</returns>
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1">
            <summary>
            An <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/> implementation that detects leaks in the use of the object pool.
            <para>
            A leak is produced if an object is leased from the pool but not returned before it is finalized.
            An error is only produced in <c>Debug</c> builds.
            This type is only recommended to be used for diagnostc builds.
            </para>
            </summary>
            <typeparam name="T">The type of object which is being pooled.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1.#ctor(Microsoft.Extensions.ObjectPool.ObjectPool{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1"/>.
            </summary>
            <param name="inner">The <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/> instance to track leaks in.</param>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1.Get">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1.Return(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPoolProvider">
            <summary>
            An <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider"/> that produces instances of
            <see cref="T:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPool`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPoolProvider.#ctor(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPoolProvider"/>.
            </summary>
            <param name="inner">The <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider"/> to wrap.</param>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.LeakTrackingObjectPoolProvider.Create``1(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.ObjectPool`1">
            <summary>
            A pool of objects.
            </summary>
            <typeparam name="T">The type of objects to pool.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.ObjectPool`1.Get">
            <summary>
            Gets an object from the pool if one is available, otherwise creates one.
            </summary>
            <returns>A <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.ObjectPool`1.Return(`0)">
            <summary>
            Return an object to the pool.
            </summary>
            <param name="obj">The object to add to the pool.</param>
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.ObjectPool">
            <summary>
            Methods for creating <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.ObjectPool.Create``1(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{``0})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider">
            <summary>
            A provider of <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.ObjectPoolProvider.Create``1">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool"/>.
            </summary>
            <typeparam name="T">The type to create a pool for.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.ObjectPoolProvider.Create``1(Microsoft.Extensions.ObjectPool.IPooledObjectPolicy{``0})">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool"/> with the given <see cref="T:Microsoft.Extensions.ObjectPool.IPooledObjectPolicy`1"/>.
            </summary>
            <typeparam name="T">The type to create a pool for.</typeparam>
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider)">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/> that pools <see cref="T:System.Text.StringBuilder"/> instances.
            </summary>
            <param name="provider">The <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.ObjectPoolProviderExtensions.CreateStringBuilderPool(Microsoft.Extensions.ObjectPool.ObjectPoolProvider,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/> that pools <see cref="T:System.Text.StringBuilder"/> instances.
            </summary>
            <param name="provider">The <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPoolProvider"/>.</param>
            <param name="initialCapacity">The initial capacity to initiaize <see cref="T:System.Text.StringBuilder"/> instances with.</param>
            <param name="maximumRetainedCapacity">The maximum value for <see cref="P:System.Text.StringBuilder.Capacity"/> that is allowed to be
            retained, when an instance is returned.</param>
            <returns>The <see cref="T:Microsoft.Extensions.ObjectPool.ObjectPool`1"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.PooledObjectPolicy`1">
            <summary>
            A base type for <see cref="T:Microsoft.Extensions.ObjectPool.IPooledObjectPolicy`1"/>.
            </summary>
            <typeparam name="T">The type of object which is being pooled.</typeparam>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.PooledObjectPolicy`1.Create">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.PooledObjectPolicy`1.Return(`0)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy">
            <summary>
            A policy for pooling <see cref="T:System.Text.StringBuilder"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.InitialCapacity">
            <summary>
            Gets or sets the initial capacity of pooled <see cref="T:System.Text.StringBuilder"/> instances.
            </summary>
            <value>Defaults to <c>100</c>.</value>
        </member>
        <member name="P:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.MaximumRetainedCapacity">
            <summary>
            Gets or sets the maximum value for <see cref="P:System.Text.StringBuilder.Capacity"/> that is allowed to be
            retained, when <see cref="M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.Return(System.Text.StringBuilder)"/> is invoked.
            </summary>
            <value>Defaults to <c>4096</c>.</value>
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.Create">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.ObjectPool.StringBuilderPooledObjectPolicy.Return(System.Text.StringBuilder)">
            <inheritdoc />
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
